{"version":3,"sources":["Burger.js","App.js","serviceWorker.js","index.js"],"names":["Burger","props","toppings","map","topping","idx","key","onClick","onRemove","className","App","state","burger","addTopping","setState","removeTopping","targetIndex","filter","handleSpecial","getMessage","count","countTopping","top","length","getFinalCost","toFixed","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAGe,SAASA,EAAOC,GAC7B,OAAOA,EAAMC,SAASC,KAAI,SAACC,EAASC,GAAV,OACxB,yBACEC,IAAKD,EACLE,QAAS,kBAAMN,EAAMO,SAASH,IAC9BI,UAAWL,O,ICoHFM,E,4MArHbC,MAAQ,CACNC,OAAQ,CAAC,SAAU,SAAU,QAAS,U,EAGxCC,WAAa,SAACT,GACZ,EAAKU,SAAS,CACZF,OAAO,CAAD,UAAMR,IAAN,mBAAoB,EAAKO,MAAMC,Y,EAIzCG,cAAgB,SAAAC,GAAgB,IACtBJ,EAAW,EAAKD,MAAhBC,OAER,EAAKE,SAAS,CACZF,OAAQA,EAAOK,QAAO,SAACb,EAASC,GAAV,OAAkBA,GAAOW,Q,EAInDE,cAAgB,WAEd,EAAKJ,SAAS,CACZF,OAAQ,CAAC,SAAU,SAAU,QAAS,SAAU,SAAU,QAAS,SAAU,SAAU,Y,EAM3FO,WAAa,WACX,IAAIC,EAAQ,EAAKC,aAAa,UAE9B,OAAc,IAAVD,EACK,kBACY,IAAVA,EACF,kBACY,IAAVA,EACF,gBACY,IAAVA,EACF,iBACY,IAAVA,EACF,mBAEA,kB,EAIXC,aAAe,SAAAjB,GAEb,OADoB,EAAKO,MAAMC,OAAOK,QAAO,SAAAK,GAAG,OAAIA,IAAQlB,KACvCmB,Q,EAIvBC,aAAe,WAOb,OAFmB,IAEJ,EAAKH,aAAa,SAJb,GAIqC,EAAKA,aAAa,UAHvD,GAGiF,EAAKA,aAAa,WAAyBI,QAAQ,I,uDAGhJ,IAAD,OAICb,EAAWc,KAAKf,MAAhBC,OAER,OACE,yBAAKH,UAAU,OACb,+BACE,oCACA,6BACE,4BAAQA,UAAU,UAAUF,QAAS,kBAAM,EAAKM,WAAW,YAA3D,WACF,6BACE,4BAAQJ,UAAU,UAAUF,QAAS,kBAAM,EAAKM,WAAW,YAA3D,WACF,6BACE,4BAAQJ,UAAU,UAAUF,QAAS,kBAAM,EAAKM,WAAW,WAA3D,UACF,6BACE,4BAAQJ,UAAU,UAAUF,QAAS,kBAAM,EAAKM,WAAW,WAA3D,YACF,kDACA,6BACE,4BAAQJ,UAAU,UAAUF,QAASmB,KAAKR,eAA1C,uBAEF,6BAAST,UAAU,UACjB,gDACA,4CACA,4CACA,6CACA,+CAGJ,8BACE,4CACA,6BAASA,UAAU,kBACjB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WAGf,kBAAC,EAAD,CACEP,SAAUU,EACVJ,SAAUkB,KAAKX,gBAGnB,yBAAKN,UAAU,eACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAe,yBAAKA,UAAU,WAAf,eAAsCiB,KAAKP,cAEvE,gDAAsBO,KAAKF,yB,GA9GzBG,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66d3c641.chunk.js","sourcesContent":["import React from 'react';\nimport './Burger.css'\n\nexport default function Burger(props) {\n  return props.toppings.map((topping, idx) => (\n    <div\n      key={idx}\n      onClick={() => props.onRemove(idx)}\n      className={topping}>\n\n    </div>\n  ))\n}","import React from 'react'\nimport './App.css'\nimport Burger from './Burger'\n\n\nclass App extends React.Component {\n\n  state = {\n    burger: ['tomato', 'cheese', 'patty', 'salad']\n  }\n\n  addTopping = (topping) => {\n    this.setState({\n      burger: [`${topping}`, ...this.state.burger]\n    })\n  }\n\n  removeTopping = targetIndex => {\n    const { burger } = this.state\n\n    this.setState({\n      burger: burger.filter((topping, idx) => idx != targetIndex)\n    })\n  }\n\n  handleSpecial = () => {\n\n    this.setState({\n      burger: ['cheese', 'tomato', 'patty', 'cheese', 'tomato', 'patty', 'cheese', 'tomato', 'patty']\n    })\n  }\n\n\n\n  getMessage = () => {\n    var count = this.countTopping('cheese')\n\n    if (count === 0) {\n      return 'no cheese added'\n    } else if (count === 1) {\n      return 'one cheese only'\n    } else if (count === 2) {\n      return 'double cheese'\n    } else if (count === 3) {\n      return 'tripple cheese'\n    } else if (count === 4) {\n      return 'quadruple cheese'\n    } else {\n      return 'maximum cheese'\n    }\n  }\n\n  countTopping = topping => {\n    var toppingAmount = this.state.burger.filter(top => top === topping)\n    return toppingAmount.length\n  }\n\n\n  getFinalCost = () => {\n    var cost = 0\n\n    const tomatoPrice = 0.8\n    const cheesePrice = 0.6\n    const pattyPrice = 1.9\n\n    return cost = (this.countTopping('patty') * pattyPrice + this.countTopping('tomato') * tomatoPrice + this.countTopping('cheese') * cheesePrice).toFixed(2)\n  }\n\n  render() {\n\n    // const burger = this.state.burger\n    // destructuring\n    const { burger } = this.state\n\n    return (\n      <div className=\"App\">\n        <aside>\n          <h2>MENU</h2>\n          <div>\n            <button className=\"topping\" onClick={() => this.addTopping('tomato')}>tomato</button></div>\n          <div>\n            <button className=\"topping\" onClick={() => this.addTopping('cheese')}>cheese</button></div>\n          <div>\n            <button className=\"topping\" onClick={() => this.addTopping('patty')}>patty</button></div>\n          <div>\n            <button className=\"topping\" onClick={() => this.addTopping('salad')}>lettuce</button></div>\n          <h2>Burger of the Day:</h2>\n          <div>\n            <button className=\"special\" onClick={this.handleSpecial}>Melbourne Trifecta</button>\n          </div>\n          <section className=\"prices\">\n            <h3>Our Prices, AU$:</h3>\n            <li>Tomato:  0.8</li>\n            <li>Cheese:  0.6</li>\n            <li>Patty:   1.9 </li>\n            <li>Lettuce: free</li>\n          </section>\n        </aside>\n        <main>\n          <h1>Reburgulator</h1>\n          <section className=\"burger-wrapper\">\n            <div className=\"top-bun\">\n              <div className=\"seed\"></div>\n              <div className=\"seed2\"></div>\n            </div>\n            {\n              <Burger\n                toppings={burger}\n                onRemove={this.removeTopping}\n              />\n            }\n            <div className=\"bottom-bun\"></div>\n            <div className=\"tablecloth\">\n              <div className=\"orderdetails\"><div className=\"message\">How cheesy: {this.getMessage()}\n              </div>\n                <div>Total cost: AU$ {this.getFinalCost()}</div></div>\n            </div>\n          </section>\n        </main>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}